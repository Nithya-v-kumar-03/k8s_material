===========Kind installation steps============
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64

chmod +x ./kind

sudo mv ./kind /usr/local/bin/kind


==========kubectl installation steps============
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"


chmod +x ./kubectl

sudo mv ./kubectl /usr/local/bin/kubectl


============configfile====================
# three node (two workers) cluster config
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker

============create kind cluster============

kind create cluster --config configfile


----If nodes are in NotReady state do below steps-----
sudo sysctl net/netfilter/nf_conntrack_max=131072
kind delete cluster
kind create cluster --config configfile

#validation
kubectl get nodes

===============Extra i have added it for reference======================================
If u want to access Kubectl in shortform use command
alias k=kubectl


#returns all the kubernetes objects
kubectl api-resources
#if namespace is true it is limited to a specific area for a use --if is false we need to specify globally

#to check default namespace(Shortform ns)
kubectl get namespace

# to chect pod(shortform po)
kubectl get pod
#it will list the pods under specified namespace(if u didn't specify namespace while creation of pod it will consider default namespace

#to create namespace
kubectl create ns myns

#To access pod undernamespace command
kubectl get po -n myns

#To check pod in default namespace
kubectl get po

#To check under Kube-system namespace pod
kubectl get pod -n kube-system

#to check in wide way of the kube-system ns pod
kubectl get pod -n kube-system -o wide

we can create a pod in 2 ways
Imperative (if we want to go for certification)
through yamal

#Create a Standalone pod in Imperative
 kubectl run firstpod --image=nithya890/first:1.0 --port=8080

--run to check pod--
kubectl get po
kubectl get pod -o wide

#To check pod in more described way(while creating pod if there is a issue we can check here)
kubectl describe po firstpod

#To check logs of pod
kubectl logs firstpod

#To log inside a pod
kubectl exec -it firstpod --bash

#To delete the pod
kubectl delete pod firstpod

#pod creation through yaml & redirect it to pod.yaml file for that the command is
kubectl run firstpod --image=nithya890/first:1.0 --port=8080 --dry-run=client -o yaml > pod.yaml

#To create pod from yaml file
kubectl apply -f pod.yaml
kubectl get po
kubectl delete po firstpod  [once after delete the pod will not be present,if we go for deploy method pod will automatically gets created after delete]

#creation of deployment object(to simply create file)
kubectl create deploy mydeploy --image=nithya890/first:1.0 --port=8080 --dry-run=client -o yaml > deploy.yaml

vi deploy.yamal

apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: mydeploy
  name: mydeploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mydeploy
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mydeploy
    spec:
      containers:
      - image: nithya890/first:1.0
        name: first
        ports:
        - containerPort: 8080
        resources: {}
status: {}

run ==kubectl apply -f deploy.yaml
kubectl get po
kubectl get rs [display the replicaset]
==============================================================================================================


